{"version":3,"sources":["actions.js","Add.js","Link.js","LinkContainer.js","Links.js","Item.js","VisibleItems.js","VisibleItemList.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["ADD_ITEM","REMOVE_ITEM","TOGGLE_ITEM","SET_VISIBILITY_FILTER","VisibilityFilters","nextItemId","Add","input","Card","className","Body","Form","onSubmit","e","text","preventDefault","value","trim","props","dispatch","store","getState","items","length","type","id","ref","node","Button","React","Component","connect","Link","Nav","Item","eventKey","this","children","onClick","disabled","active","LinkContainer","state","ownProps","filter","visibilityFilter","Links","variant","defaultActiveKey","style","textDecoration","completed","description","removeClick","VisibleItems","Table","map","item","onItemClick","getVisibleItems","t","VisibleItemList","toggleItem","removeItem","App","Navbar","bg","Brand","Container","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","createStore","subscribe","stringify","setItem","saveState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.991e03df.chunk.js","sourcesContent":["export const ADD_ITEM = \"ADD_ITEM\";\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\r\nexport const TOGGLE_ITEM = \"TOGGLE_ITEM\";\r\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\r\n\r\nexport const VisibilityFilters = {\r\n    SHOW_ALL: \"SHOW_ALL\",\r\n    SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n    SHOW_ACTIVE: \"SHOW_ACTIVE\"\r\n}\r\n\r\nlet nextItemId = 0\r\nexport const addItem = (text, id) => {\r\n    return {\r\n        type: ADD_ITEM,\r\n        id : nextItemId++,\r\n        text: text\r\n    }\r\n}\r\nexport function setVisibilityFilter(filter) {\r\n    return {\r\n        type: SET_VISIBILITY_FILTER,\r\n        filter\r\n    }\r\n}\r\nexport function toggleItem(id) {\r\n    return {\r\n        type: TOGGLE_ITEM,\r\n        id\r\n    }\r\n}\r\nexport function removeItem(id) {\r\n    return {\r\n        type: REMOVE_ITEM,\r\n        id: id\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { connect } from 'react-redux'\r\nimport { addItem } from './actions'\r\n\r\nclass Add extends React.Component {\r\n\r\n  render() {\r\n    let input\r\n    return (\r\n      <>\r\n        <Card className=\"mb-5 mt-2\">\r\n          <Card.Body>\r\n            <Form\r\n              onSubmit={(e) => {\r\n                e.preventDefault()\r\n                if (!input.value.trim()) {\r\n                  return\r\n                }\r\n                this.props.dispatch(addItem(input.value, this.props.store.getState().items.length))\r\n                input.value = ''\r\n              }}\r\n            >\r\n              <input ref={node => {\r\n                input = node\r\n              }}\r\n              />\r\n              <Button className=\"ml-5\" type=\"submit\">Add Item </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect() (Add);\r\n","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nclass Link extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            eventKey={this.props.children}\r\n            onClick={this.props.onClick}\r\n            disabled={this.props.active}>\r\n            {this.props.children}\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Link;","import { connect } from 'react-redux';\r\nimport { setVisibilityFilter } from './actions'\r\nimport Link from './Link'\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        active: ownProps.filter === state.visibilityFilter\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onClick: () => {\r\n            dispatch(setVisibilityFilter(ownProps.filter))\r\n        }\r\n    }\r\n}\r\n\r\nconst LinkContainer = connect(mapStateToProps, mapDispatchToProps) (Link)\r\n\r\nexport default LinkContainer","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport LinkContainer from './LinkContainer'\r\nimport { VisibilityFilters } from './actions'\r\n\r\nclass Links extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n       <Nav variant=\"tabs\" defaultActiveKey=\"All\">\r\n        <LinkContainer filter={VisibilityFilters.SHOW_ALL}>All</LinkContainer>\r\n        <LinkContainer filter={VisibilityFilters.SHOW_ACTIVE}>Active To-Dos</LinkContainer>\r\n        <LinkContainer filter={VisibilityFilters.SHOW_COMPLETED}>Completed</LinkContainer>\r\n      </Nav>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Links;","\r\nimport React from \"react\"\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass Item extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n      <td>\r\n        {this.props.id}\r\n      </td>\r\n\r\n      <td>\r\n        <span style={{\r\n          textDecoration: this.props.completed\r\n            ? 'line-through' : 'none'\r\n        }} onClick={this.props.onClick}>\r\n          {this.props.description}\r\n        </span>\r\n      </td>\r\n\r\n      <td>\r\n        <Button variant=\"danger\" onClick={this.props.removeClick}>Remove</Button>\r\n      </td>\r\n\r\n    </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Item","import React from 'react';\r\nimport Table from 'react-bootstrap/Table'\r\nimport Item from './Item'\r\n\r\n\r\nclass VisibleItems extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Item</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.items.map((item) => (\r\n              <Item key={item.id} {...item}\r\n                onClick={() => this.props.onItemClick(item.id)}\r\n                removeClick={() => this.props.removeClick(item.id)} />\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VisibleItems;","import { connect } from 'react-redux'\r\nimport { toggleItem } from './actions'\r\nimport { removeItem } from './actions'\r\nimport VisibleItems from './VisibleItems'\r\n\r\nconst getVisibleItems = (items, filter) => {\r\n    switch (filter) {\r\n        case 'SHOW_COMPLETED':\r\n            return items.filter(t => t.completed)\r\n        case 'SHOW_ACTIVE':\r\n            return items.filter(t => !t.completed)\r\n        case 'SHOW_ALL':\r\n        default:\r\n            return items\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: getVisibleItems(state.items, state.visibilityFilter)\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onItemClick: id => {\r\n            dispatch( toggleItem(id) )\r\n        },\r\n        removeClick: id => {\r\n            dispatch( removeItem(id) )\r\n        }\r\n    }\r\n}\r\nconst VisibleItemList = connect(mapStateToProps, mapDispatchToProps)(VisibleItems)\r\n\r\nexport default VisibleItemList;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Add from './Add'\r\nimport Links from './Links'\r\n// import VisibleItems from './VisibleItems'\r\nimport VisibleItemList from './VisibleItemList'\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navbar bg=\"info\" variant=\"dark\">\r\n          <Navbar.Brand>\r\n            React To Do App\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n        <Container>\r\n          <Add store={this.props.store}/>\r\n          <Links />\r\n          <VisibleItemList />\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import {\r\n    VisibilityFilters,\r\n    SET_VISIBILITY_FILTER,\r\n    ADD_ITEM,\r\n    REMOVE_ITEM,\r\n    TOGGLE_ITEM\r\n} from './actions';\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\n\r\nconst visibilityFilterReducer = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n    switch (action.type) {\r\n        case SET_VISIBILITY_FILTER:\r\n            return action.filter\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst itemReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case ADD_ITEM:\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    description: action.text,\r\n                    completed: false\r\n                }\r\n            ];\r\n        case REMOVE_ITEM:\r\n            return state.filter((value) => action.id !== value.id)\r\n        case TOGGLE_ITEM:\r\n            return state.map ((item) => {\r\n                if (item.id === action.id) {\r\n                    return Object.assign({}, item, {\r\n                        completed: !item.completed\r\n                    })\r\n                }\r\n                return item;\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const rootReducer = combineReducers ({\r\n    visibilityFilter: visibilityFilterReducer,\r\n    items: itemReducer\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport { rootReducer } from './reducer'\r\n\r\n// const store = createStore(rootReducer);\r\n\r\nconst loadState = () => {\r\n  const serializedState = localStorage.getItem('state');\r\n  if (!serializedState) {\r\n    return undefined;\r\n  }\r\n  return JSON.parse(serializedState);\r\n}\r\nconst persistedState = loadState();\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\nconst saveState = (state) => {\r\n  const serializedState = JSON.stringify(state);\r\n  localStorage.setItem('state', serializedState);\r\n}\r\n\r\nstore.subscribe( () => {\r\n  saveState( store.getState() )\r\n})\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App store={store}/>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}